#include "componentModelConfigurator.h"
#include "descParser/library.include.h"
#include "resourceUtils/library.include.h"
#include "componentModelTesting/library.include.h"
#include "common/ptr_utils.h"
#include "common/breakpoint.h"




namespace ComponentModel
{
/*
	bool isQueryInclude(const FinalizeQuery& query, const std::string& classId, int index, int& queryEntry)
	{
		for (int i = 0; i < query.entries.size(); ++i)
		{
			const FinalizeQuery::Entry& entry = query.entries[i];

			if (InheritanceTable::valid(entry.clsId(), classId))
			{
				if (entry.index == index)
				{
					queryEntry = i;
					return true;
				}
			}
		}

		return false;
	}

	bool mayBeIsAlias(const FinalizeQuery& query, const std::string& alias)
	{
		for (int i = 0; i < query.entries.size(); ++i)
		{
			const FinalizeQuery::Entry& entry = query.entries[i];
			if (!entry.alias.empty())
			{
				if (alias == entry.alias)
				{
					return true;
				}
			}
		}

		return false;
	}

	bool isQueryIncludeWithAlias(const FinalizeQuery& query, const std::string& alias, const std::string& classId, int index, int& queryEntry)
	{
		for (int i = 0; i < query.entries.size(); ++i)
		{
			const FinalizeQuery::Entry& entry = query.entries[i];
			if (!entry.alias.empty())
			{
				if (alias == entry.alias)
				{
					if (InheritanceTable::valid(entry.clsId(), classId))
					{
						if (entry.index == index)
						{
							queryEntry = i;
							return true;
						}
					}
				}
			}
		}

		return false;
	}

	struct PropertyDefault
	{
		PropertyDefault(const std::string& n, const Expressions::Expression* e) :name(n), expression(e) {}

		pstring name;
		const Expressions::Expression* expression;
	};


	bool isGoodForQuery(ComponentDesc::Link& ilink, const std::string& componentClassId, const FinalizeQuery& query, const ObjectParser::ClassDesc& classDesc, int& queryEntry)
	{
		queryEntry = -1;

		using namespace Base::StrUtils;
		LOG_MSG("\t\tlink: " << ilink.name);
		const ObjectParser::Component* link = classDesc.components().findComponent(ilink.name);
		if (!link)
		{
			LOG_ERROR("component try to link with not existed component: " << "class name: " << Braced(classDesc.typeName()) << " link name: " << Braced(ilink.name));
			return false;
		}
		else if (!InheritanceTable::valid(ilink.className, link->type))
		{
			bool isAlias = false;
			if (mayBeIsAlias(query, ilink.className))
			{
				if (!isQueryIncludeWithAlias(query, ilink.className, link->type, 0, queryEntry))
				{
					LOG_ERROR("alias failed");
					return false;
				}

				ilink.alias = ilink.className;
				isAlias = true;
			}
			else if (!isComponentRegistred(ilink.className))
			{
				LOG_ERROR("trying lo link with соmponent of undefined class: " << Braced(ilink.className));
				return false;
			}

			if (!isAlias)
			{
				LOG_ERROR("can't convert link class: \n\tfrom: " << Braced(link->type) << "\n\tto: " << Braced(ilink.className) << "\n\tcheck your components hierarchy");
				return false;
			}
		}
		else if (!isQueryInclude(query, link->type, 0, queryEntry))
		{
			LOG_ERROR("query for component: " << Braced(componentClassId) << " not include link: " << Braced(ilink.className));
			return false;
		}

		ilink.className = link->type;

		return true;
	}

	bool solveLinks(const ObjectParser::Component& component, const ObjectParser::ClassDesc& classDesc, ComponentDesc& compDesc)
	{
		int querySize = compDesc.query.entries.size();
		std::vector<bool> links(querySize, false);

		//проверяем все ли существующие в скрипте связи можно разрешить
		if (component.linkParams)
		{
			for (auto* param : *component.linkParams)
			{
				int idx = -1;
				ComponentDesc::Link descLink(param->type, param->name);
				if (isGoodForQuery(descLink, compDesc.className, compDesc.query, classDesc, idx))
				{
					compDesc.addLink(descLink);
				}

				links[idx] = (idx >= 0);
			}
		}

		//добавляем не перечисленные в скрипте связи к связям описание компонент
		for (int k = 0; k < querySize; ++k)
		{
			if (!links[k])
			{
				for (auto& comp : classDesc.components())
				{
					const ObjectParser::Component* component = comp.second;

					ENFORCE(component);
					const std::string& type = component->type;
					if (InheritanceTable::valid(compDesc.query.entries[k].clsId(), type))
					{
						compDesc.addLink(ComponentDesc::Link(type, component->name));
						links[k] = true;
						break;
					}
				}
			}
		}

		//проверяем все ли связи которые требует компонент возможно разрешить
		bool res = true;
		for (int k = 0; k < querySize; ++k)
		{
			if (!links[k])
			{
				LOG_ERROR("Can't link class: " << classDesc.typeName() << " component: " << compDesc.className << " can't find component: " << compDesc.query.entries[k].clsId());
			}

			res &= links[k];
		}

		return res;
	}


	bool assignExpressionToProperty(const PropertyDefault& expressionHolder, ComponentResource& componentResource)
	{
		try
		{
			const PropBase* prop = componentResource.table->findProperty(expressionHolder.name);
			if (prop)
			{
				return prop->assignValue(*expressionHolder.expression, componentResource.resource);
			}
			else
			{
				const std::string& componentName = ComponentsFactory::className(componentResource.table->componentGlobalIndex);
				LOG_ERROR("component: " << componentName << " hasn't property: " << expressionHolder.name);
			}
		}
		catch (std::exception& e)
		{
			LOG_ERROR(e);
		}

		return false;
	}
	*/

	struct HierarchyNode
	{
		ObjectParser::InstanceHandle* parent = nullptr;
		ObjectParser::InstanceHandle* self = nullptr;
	};

	std::vector<HierarchyNode> linearize(HierarchyNode parent, Expressions::EvaluatedScope& scope)
	{
		std::vector<HierarchyNode> result;

		for (auto& unit : scope)
		{
			if (auto instanceHandle = unit.second->cast<ObjectParser::InstanceHandle>())
			{
				result.push_back({ parent.self, instanceHandle });
				auto children = linearize(result.back(), *instanceHandle);
				result.insert(result.end(), children.begin(), children.end());
			}
			else if (auto instances = unit.second->cast<Expressions::EvaluatedArray>())
			{
				for (std::size_t i = 0; i < instances->count(); ++i)
				{
					if (auto instanceHandle = const_cast<Expressions::EvaluationUnit*>(instances->element(i))->cast<ObjectParser::InstanceHandle>())
					{
						result.push_back({ parent.self, instanceHandle });
						auto children = linearize(result.back(), *instanceHandle);
						result.insert(result.end(), children.begin(), children.end());
					}
				}
			}
		}

		return result;
	}

	template<class MapType>
	void initComponent(ComponentBase& component, const MapType& properties)
	{
		try
		{
			const ResourceTable* resource = ComponentsFactory::resourceTable(component.classIndex());
			ENFORCE(resource);

			for (auto& a : properties)
			{
				try
				{
					if (auto prop = resource->findProperty(a.first.c_str()))
					{
						ENFORCE(a.second);
						//LOG_MSG("init component property: " << a.name << " value: " << a.expression->string());
						prop->convert(component, *a.second);
					}
					else
					{
						LOG_ERROR("component: " << ComponentsFactory::className(component) << " hasn't property: " << a.first);
					}
				}
				catch (std::exception& e)
				{
					LOG_ERROR("initComponent failed: \n\t" << e.what());
				}
			}
		}
		catch (std::exception& e)
		{
			LOG_ERROR(e.what());
			throw;
		}
	}

	EntitiesList& initializeEntities(Expressions::EvaluatedScope& scope, EntitiesList& entities)
	{
		auto objects = linearize(HierarchyNode(), scope);
		// 		LOG_EXPRESSION_VALUE(objects.size());

		std::map<ObjectParser::InstanceHandle*, ClassDesc*> objectToClassDesc;
		ClassDescList classes;
		for (auto& object : objects)
		{
			ClassDesc& classDesc = classes.add(object.self->type);
			objectToClassDesc[object.self] = &classDesc;
			for (auto* componentHandle : object.self->components())
			{
				classDesc.addComponent(componentHandle->type, componentHandle->name, "");
			}

			LOG_MSG("");
			classDesc.debug();
		}

		classes.finalize();
		entities.classes.create(classes, entities.executionList);
		ObjectParser::ObjectConverter::classes = &entities.classes;

		std::map<ObjectParser::InstanceHandle*, Entity*> objectToEntity;
		for (std::size_t objectIdx = 0; objectIdx < objects.size(); ++objectIdx)
		{
			auto& object = objects[objectIdx];

			auto classDesc = objectToClassDesc[object.self];
			auto classIndex = classDesc->classIndex;
			auto entity = entities.create(classIndex);
			LOG_EXPRESSION_VALUE(entity->getClass().name());
			objectToEntity[object.self] = entity;
			std::vector<ObjectParser::ComponentHandle*> componentHandles;
			for (std::size_t i = 0; i < entity->getComponentsCount(); ++i)
			{
				std::string componentName = entity->getClass().getComponentName(i);
				auto componentHandle = object.self->component(componentName);
				ENFORCE(componentHandle);
				componentHandles.push_back(componentHandle);
				componentHandle->objectIndex = objectIdx;
				componentHandle->componentIndex = i;
				// 				LOG_EXPRESSION_VALUE3(componentHandle->objectIndex, componentHandle->type, componentHandle->name);
			}

			ENFORCE(entity->getComponentsCount() == componentHandles.size());
			for (std::size_t i = 0; i < entity->getComponentsCount(); ++i)
			{
				initComponent(entity->getComponent(i), *componentHandles[i]);
			}
			entity->finalize();
		}

		for (auto& object : objects)
		{
			if (object.parent)
			{
				auto parent = objectToEntity[object.parent];
				ENFORCE(parent);
				ENFORCE(object.self);
				auto self = objectToEntity[object.self];
				ENFORCE(self);
				parent->map(*self, &ComponentsFactory::inheriteProperties);
			}
		}

		entities.classes.finalize(entities.executionList);

		for (auto& entity : entities)
		{
			entity.getClass().bindToExecutionList(entity);
		}

		return entities;
	}
	
	EntitiesList& descriptionLoad(const char* filename, EntitiesList& entities)
	{
		ENFORCE(filename);
		ObjectParser::Compiler comp(filename);
		auto& classTable = comp.result.classes();
		ObjectParser::ObjectConverter::classTable = &classTable;
		auto result = ComponentModelTesting::unroll(classTable, "Main", "main");
		return initializeEntities(result, entities);		
	}

	void descriptionTest(const char* filename)
	{
		ENFORCE(filename);

		EntitiesList entities;
		descriptionLoad(filename, entities).activate(true);
		//entities.debugOutput();

		for (int i = 0; i < 3; ++i)
		{
			entities.execute();
		}
	}
}

