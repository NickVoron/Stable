#pragma once
#include <string>
#include <unordered_map>
#include "expression.h"


namespace Expressions
{
	class EvaluationUnit;

	// это собственное пространство имен переменной, к примеру у струтуры все дочерние свойства будут храниться здесь
	// такая же штука есть у класса. У ProxyExpression собственное отсутвует вместо него пространство имен класса
	// Если Epxression является массивом то все ссылки на дочерние элементы тут то же будут храниться 
	// Это все нужно что что бы Path могло раскручивать адресации вида var.property[1],
	// в данном случае нужно найти var у него в пространстве имен найти property а у него найди [1], 
	// то есть первый элемент массива

	enum class InsertMethod
	{
		INSERT,
		REPLACE,
		REPLACE_OR_INSERT,
		IGNORE_IF_EXIST
	};


	template<typename ExpressionType>
	class ScopeNames: public std::map<std::string, ExpressionType*>
	{
	public:
		ScopeNames():scopeName("unnamed") {};
		ScopeNames(const std::string& scopeName_) : scopeName(scopeName_){}
		~ScopeNames() {}

		void add(const std::string& name, ExpressionType* expr, InsertMethod method);
		bool exists(const std::string& name) const;
		ExpressionType* get(const std::string& name) const;
		ExpressionType* getByType(const std::string& type) const;

		void copyFrom(const ScopeNames& proto);

		void remove(const std::string& name);

		std::string scopeName;		

		void setParent(const ScopeNames<ExpressionType>* parent_) { parent = parent_; }
	
	private:
		const ScopeNames<ExpressionType>* parent = 0;
		std::set<ExpressionType*> classMembers;
	};

	template<typename ExpressionType>
	void ScopeNames<ExpressionType>::add(const std::string& name, ExpressionType* expr, InsertMethod method)
	{
		auto& found = find(name);
		ENFORCE_MSG(method != InsertMethod::INSERT || found == end(), __FUNCTION__ "INSERT: scopenames alredy have property by name: " + name);
		ENFORCE_MSG(method != InsertMethod::REPLACE || found != end(), __FUNCTION__ "REPLACE: scopenames not have property by name: " + name);

		if (method == InsertMethod::IGNORE_IF_EXIST && found != end())
		{
			return;
		}

		(*this)[name] = expr;
	}

	template<typename ExpressionType>
	ExpressionType* ScopeNames<ExpressionType>::get(const std::string& name) const
	{
		auto found = find(name);
		ExpressionType* result = (found != end()) ? found->second : nullptr;
		if (!result && parent)
		{
			result = parent->get(name);
		}

		return result;

	}

	template<typename ExpressionType>
	bool ScopeNames<ExpressionType>::exists(const std::string& name) const
	{
		return get(name)!=nullptr;
	}

	template<typename ExpressionType>
	ExpressionType* ScopeNames<ExpressionType>::getByType(const std::string& type) const
	{
		auto found = std::find_if(begin(), end(), [type](auto& iter)
		{
			return iter.second->typeName() == type;
		});

		ExpressionType* result = (found != end()) ? found->second : nullptr;

		if (!result && parent)
		{
			result = parent->getByType(type);
		}

		return result;
	}

	template<typename ExpressionType>
	void ScopeNames<ExpressionType>::copyFrom(const ScopeNames& proto)
	{
		(map&)(*this) = (map&)proto;
	}

	template<typename ExpressionType>
	void ScopeNames<ExpressionType>::remove(const std::string& name)
	{
		auto iter = find(name);
		ENFORCE(iter != end())

			erase(iter);
	}

	
	typedef ScopeNames<const Expression> ExpressionScope;
	typedef ScopeNames<EvaluationUnit> EvaluatedScope;


	
}
	